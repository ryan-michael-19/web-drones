/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log In
         * @description Log in with username and password.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns login cookie on success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example Login Successful */
                        "text/plain": string;
                    };
                };
                /** @description Returns when login fails from bad username/password combo */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example invalid username or password */
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/newUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create New User
         * @description Creates new user with associated password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Creates new user, logs them in, and returns starting bots and mines */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bots: components["schemas"]["Bot"][];
                            mines: components["schemas"]["Coordinates"][];
                        };
                    };
                };
                /** @description Returns when login fails from bad username/password combo */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example invalid basic auth header */
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize game
         * @description initialize the game with mining locations and a single bot
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description returns starting bots and mines */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bots: components["schemas"]["Bot"][];
                            mines: components["schemas"]["Coordinates"][];
                        };
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all bot info
         * @description Get an array of bots and what they're doing
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description array of all bots */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bot"][];
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single bot info
         * @description Get a single bot by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    botId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description single bot with associated unique identifier */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bot"];
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move a single bot
         * @description Move bot to new location
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    botId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Coordinates"];
                };
            };
            responses: {
                /** @description returns single bot with the Id that was commanded to move */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bot"];
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}/extract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Extract scrap
         * @description Extract scrap from a metal mine near bot's current location. Only works when bot is near a mine.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    botId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns bot that mined for scrap */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bot"];
                    };
                };
                /** @description Sent when bot is not currently near a mine */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{botId}/newBot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make a new bot
         * @description Make a new bot from scrap metal. A bot must have 3 scrap in their inventory to do this.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    botId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        NewBotName: string;
                    };
                };
            };
            responses: {
                /** @description Information about the newly created bot */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bot"];
                    };
                };
                /** @description Sent when requested bot does not have enough scrap to make a new one. */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mines
         * @description Get the coordinates of mines
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns coordinates of all mines in the world */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Coordinates"][];
                    };
                };
                429: components["responses"]["RateLimitError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Bot: {
            identifier: string;
            name: string;
            /** @enum {string} */
            status: "IDLE" | "MOVING" | "MINING";
            coordinates: components["schemas"]["Coordinates"];
            inventory: number;
        };
        Coordinates: {
            /** Format: double */
            x: number;
            /** Format: double */
            y: number;
        };
        Error: string;
    };
    responses: {
        /** @description Returns when the rate limit has been reached. */
        RateLimitError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/string": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
