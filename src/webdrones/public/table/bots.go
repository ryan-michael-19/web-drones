//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Bots = newBotsTable("public", "bots", "")

type botsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	UserID         postgres.ColumnInteger
	Identifier     postgres.ColumnString
	InventoryCount postgres.ColumnInteger
	Name           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BotsTable struct {
	botsTable

	EXCLUDED botsTable
}

// AS creates new BotsTable with assigned alias
func (a BotsTable) AS(alias string) *BotsTable {
	return newBotsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BotsTable with assigned schema name
func (a BotsTable) FromSchema(schemaName string) *BotsTable {
	return newBotsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BotsTable with assigned table prefix
func (a BotsTable) WithPrefix(prefix string) *BotsTable {
	return newBotsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BotsTable with assigned table suffix
func (a BotsTable) WithSuffix(suffix string) *BotsTable {
	return newBotsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBotsTable(schemaName, tableName, alias string) *BotsTable {
	return &BotsTable{
		botsTable: newBotsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newBotsTableImpl("", "excluded", ""),
	}
}

func newBotsTableImpl(schemaName, tableName, alias string) botsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		IdentifierColumn     = postgres.StringColumn("identifier")
		InventoryCountColumn = postgres.IntegerColumn("inventory_count")
		NameColumn           = postgres.StringColumn("name")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, UserIDColumn, IdentifierColumn, InventoryCountColumn, NameColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, UserIDColumn, IdentifierColumn, InventoryCountColumn, NameColumn}
	)

	return botsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		UserID:         UserIDColumn,
		Identifier:     IdentifierColumn,
		InventoryCount: InventoryCountColumn,
		Name:           NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
