//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Mines = newMinesTable("public", "mines", "")

type minesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	UserID    postgres.ColumnInteger
	X         postgres.ColumnFloat
	Y         postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MinesTable struct {
	minesTable

	EXCLUDED minesTable
}

// AS creates new MinesTable with assigned alias
func (a MinesTable) AS(alias string) *MinesTable {
	return newMinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MinesTable with assigned schema name
func (a MinesTable) FromSchema(schemaName string) *MinesTable {
	return newMinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MinesTable with assigned table prefix
func (a MinesTable) WithPrefix(prefix string) *MinesTable {
	return newMinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MinesTable with assigned table suffix
func (a MinesTable) WithSuffix(suffix string) *MinesTable {
	return newMinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMinesTable(schemaName, tableName, alias string) *MinesTable {
	return &MinesTable{
		minesTable: newMinesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMinesTableImpl("", "excluded", ""),
	}
}

func newMinesTableImpl(schemaName, tableName, alias string) minesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		XColumn         = postgres.FloatColumn("x")
		YColumn         = postgres.FloatColumn("y")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, UserIDColumn, XColumn, YColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, UserIDColumn, XColumn, YColumn}
	)

	return minesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		UserID:    UserIDColumn,
		X:         XColumn,
		Y:         YColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
